---
import Icon from './Icon.astro';

const companies = [
	'/assests/companies/sber.svg', 
	'sber-buis-logo',
	'vtb-logo',
	'yandex-pay-logo',
	'yandex-market-logo',
	'yandex-go',
	'vk-logo',
	'dzen-logo',
	'alpha-logo',
	'sovcom-logo',
	'metro-logo',
	'meta-logo',
	'rutube-logo',
	'letual-logo'
]

const { scrollDirection = 'left-to-right' } = Astro.props; // Default to left-to-right if not provided

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const randomIndex = Math.floor(Math.random() * (i + 1)); // Случайный индекс от 0 до i
    [array[i], array[randomIndex]] = [array[randomIndex], array[i]]; // Меняем местами элементы
  }
  return array;
}
---

<style>
    .scroll-container {
      display: flex;
      overflow-x: auto; /* Enable manual scrolling */
      width: 100%; /* Full screen width */
      height: 100px; /* Fixed height */
      position: relative;
    }
  
    .scroll-wrapper {
      display: flex;
      gap: 20px; /* Set gap between cells */
    }

    .scroll-item {
        flex-shrink: 0;
        width: calc(20vw - 20px); /* Adjust width to account for gap */
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: .transparent;
        overflow: hidden;
        position: relative; /* To position the gradient overlay */
    }

  .image-container {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover; /* Ensures the image covers the entire area */
    display: block;
  }

  .image-container::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0)); /* Apply gradient */
    pointer-events: none; /* Make sure the overlay doesn't block interaction with the image */
  }
  
    .scroll-container::-webkit-scrollbar {
      display: block; /* Show scrollbar */
    }
  </style>
  
  <div class="scroll-container" id=`scrollContainer`>
    <div class="scroll-wrapper" id=`scrollWrapper`>
        {shuffleArray(companies).map((brand, index) => (
            <div class="scroll-item" key={index}>
              <img src='/assets/companies/sber.svg' alt={`Image ${index + 1}`} />
            </div>    
        ))}
    </div>
  </div>
  <div class="scroll-container" id=`scrollContainerBottom`>
    <div class="scroll-wrapper" id=`scrollWrapperBottom`>
        {shuffleArray(companies).map((brand, index) => (
            <div class="scroll-item" key={index}>
                <div class="image-container">
                    <img src='/assets/companies/sber.svg' alt={`Image ${index + 1}`} />
                </div>
            </div>    
        ))}
    </div>
  </div>
  
  <script>
    // Wait until the DOM is fully loaded
    document.addEventListener('DOMContentLoaded', () => {
        const scrollDirection = "{{ scrollDirection }}"; // Get the value passed as a prop

        const scrollContainer = document.getElementById(`scrollContainer`);
        const scrollWrapper = document.getElementById(`scrollWrapper`);

        const scrollContainerBottom = document.getElementById(`scrollContainerBottom`);
        const scrollWrapperBottom = document.getElementById(`scrollWrapperBottom`);
  
        // Determine scroll direction (left-to-right or right-to-left)

      // Function to manage auto-scroll
      const autoScroll = () => {
        const scrollWidth = scrollWrapper.scrollWidth;
        const containerWidth = scrollContainer.offsetWidth;

        const scrollWidthBottom = scrollWrapperBottom.scrollWidth;
        const containerWidthBottom = scrollContainerBottom.offsetWidth;

            // Scroll right to left
            if (scrollContainer.scrollLeft <= 0) {
                scrollContainer.scrollLeft = scrollWidth; // Reset to the end if at the start
            } else {
                scrollContainer.scrollLeft -= 1; // Move left
            }

            // Scroll left to right (default behavior)
            if (scrollContainerBottom.scrollLeft >= scrollWidthBottom - containerWidthBottom) {
                scrollContainerBottom.scrollLeft = 0; // Reset to the start if at the end
            } else {
                scrollContainerBottom.scrollLeft += 1; // Move right
            }
      };
  
      // Start the auto-scrolling
      const interval = setInterval(autoScroll, 20); // Adjust the interval for speed
  
      // Cleanup interval when the component is no longer needed (optional)
      window.addEventListener('beforeunload', () => {
        clearInterval(interval);
      });
    });
  </script>
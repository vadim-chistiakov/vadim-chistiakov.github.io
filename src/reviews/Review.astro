---
import { getReviews } from '../reviews/fetchReviews.js';

// Состояние для хранения отзывов и страницы
let reviews = [];

// Функция для загрузки отзывов
async function fetchNextPage() {
  const firstPage = await getReviews(1);
  const secondPage = await getReviews(2);
  const thirdPage = await getReviews(3);
  const forthPage = await getReviews(4);
  reviews = [...firstPage, ...secondPage, ...thirdPage, ...forthPage];
}

await fetchNextPage();
---

<div
  class="reviews-carousel"
>
  {reviews.map((review, index) => (
    <div class="review-card" key={index}>
      <p>{review}</p>
    </div>
  ))}
</div>

<style>
  .reviews-carousel {
    display: flex;
    gap: 1.5rem;
    padding: 1rem;
    scroll-snap-type: x mandatory;
    overflow-x: auto;
    align-items: flex-start;
    -webkit-overflow-scrolling: touch;
    width: 100%;
    scroll-behavior: smooth; /* Плавный скроллинг */
  }

  .review-card {
    width: 300px; /* Фиксированная ширина */
    height: 250px; /* Фиксированная высота */
    padding: 1rem;
    background: var(--accent-regular);
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    scroll-snap-align: start;
    flex-shrink: 0;
    overflow: hidden; /* Обрезаем содержимое */
    display: flex;
    flex-direction: column;
    position: relative;
    transition: transform 0.3s ease-in-out; /* Плавное изменение размера */
    transform: scale(1); /* Начальный размер 0.8 */
  }

  .review-card p {
    margin: 0;
    color: #ffffff;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 9; /* Ограничение на 3 строки */
    -webkit-box-orient: vertical;
    position: relative;
  }

  .review-card p a {
    color: var(--accent-light);
    font-weight: bold;
    cursor: pointer;
    text-decoration: none;
  }

  .review-card p a:hover {
    text-decoration: underline;
  }

  /* Увеличение центральной карточки */
  .review-card.focused {
    transform: scale(1); /* Увеличиваем в 1.2 раза */
  }
</style>

<!-- <script>
  document.addEventListener("DOMContentLoaded", () => {
    const cards = document.querySelectorAll(".review-card");

    // Функция для обновления класса для фокусной карточки
    const handleIntersection = (entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('focused'); // Добавляем класс увеличения
        } else {
          entry.target.classList.remove('focused'); // Убираем класс уменьшения
        }
      });
    };

    const observer = new IntersectionObserver(handleIntersection, {
      root: null, // Проверяем относительно окна просмотра
      rootMargin: '0px',
      threshold: 0.5 // 50% карточки должно быть видно для фокуса
    });

    // Наблюдаем за всеми карточками
    cards.forEach(card => observer.observe(card));
  });
</script> -->

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const cards = document.querySelectorAll('.review-card');

    cards.forEach((card) => {
      const paragraph = card.querySelector('p');

      // Проверяем, превышает ли текст доступную высоту
      if (paragraph.scrollHeight > paragraph.clientHeight) {
        const readMoreLink = document.createElement('a');
        readMoreLink.href = "https://reviews.it-mentors.ru/reviews?id=241413594&theme=notion-light"; // URL всех отзывов
        readMoreLink.className = 'read-more';
        readMoreLink.textContent = ' Читать далее';
        
        // Вставляем ссылку в конец текста
        paragraph.appendChild(readMoreLink);
      }
    });
  });
</script>

